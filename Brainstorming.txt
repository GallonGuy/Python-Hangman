Expected Chosen Prompt: Not applicable (pending)

Idea 1: A program that generates a maze of varying size (10x10, 20x20, 10x40, etc) and then draws the maze with turtle graphics and solves the maze, leaving the path outlined in green.

Idea 2: A program that demonstrates what the golden ratio looks like visually, and then proceeds to fill the demonstration with the numbers associated with each section. Afterwards it takes images of nature and draws the golden ratio over the image. Once an image is finished, a new image moves to the front to effectively hide the previous turtle drawing and picture before repeating the process. This continues until all images are exhausted.


Alternative prompt: Data visualization

Idea 3: Planetary Comparison
Data of the diameter and mass of the planets in the solar system are compared graphically with matplotlib, then drawn proportional to each other using turtle graphics. The drawing will be both concentric and lined up from left to eight being smallest to largest. To extend the project, the code could include input data in a loop, including repeated prompts like: 1. What is the planet's name? 2. What is the planet's diameter?, 3. What is the planet's mass? An even further extension could be to continue to planets or other celestial bodies, such as black holes.

Idea 4: Final Grade Calculator with Graphics
The program will calculate the current grade and expected/maximum grades that the user can obtain. The user will be prompted for the number of categories (quizzes, homework, exams, etc) and the weight of each category (10% of total, 20%, 25% for exam 1 and 30% for exam2, etc), respectively. The program will then ask the user if he or she would like to go through grade instance (homework 1, homework 2, etc) or give an average of the current instances. If the average method is taken, the total number of instances and remaining instances will still need to be entered. For the remaining instances in the categoery, the program will prompt the user for the expected grade he or she will receive. The function will iterate through each category listed until all are exhausted. At this point, the program will prompt the user for the extra credit opportunities that are listed (instances, weights, expected grade in each instance). Once the extra credit is included, the final grade calculation will be presented along with the maximum potential grade, and other cutoffs (assuming 90% on each assignment, 80% on each assignment, etc). These will be preseneted visually using matplotlib and or turtle graphics to demonstrate the comparison visually.

Idea 5: Ideal Salary by State
The data will be sourced from websites like glassdoor, and levels.fyi to determine the salary of entry level software positions by state. The average cost of living will also be compared state by state and stored. The program will calculate the ration of salary to cost of living to determine the ideal state from an exclusively economically driven standpoint. It will also include details such as the ideal state for remote positions, and expansion of the project could include living abroad options. Once the calculations are complete, the program will then draw the united states with turtle graphics and color in each state based on how economically viable they are. For instance, the most ideal state will have an RGB value set of 0-255-0, where the least economically viable option will have an RGB value set of 255-0-0, and the most average state will have a value set near 255-255-0.
